#! /bin/sh
### BEGIN INIT INFO
# Provides:          minecraft
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start/stop minecraft
# Description:       simple start/stop/backup script for mcwrapper
### END INIT INFO

# Author: Spike Grobstein <spikegrobstein@mac.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Description of the service"
NAME=mcwrapper

# mcwrapper's directory
MCWRAPPER_HOME=/mnt/hgfs/mcwrapper

# where files live
DAEMON=$MCWRAPPER_HOME/$NAME
PIDFILE=$MCWRAPPER_HOME/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# run-as
MINECRAFT_UID=spike
MINECRAFT_GID=spike

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# runs the daemon with the specified args
# this is used everywhere except during startup
exec_mcwrapper() {
  local SUDO_OPTS=""
  
  # run-as user
  if [ ! -z "$MINECRAFT_UID" ]; then
    SUDO_OPTS="-u $MINECRAFT_UID"
  fi
  
  # run-as group
  if [ ! -z "$MINECRAFT_GID" ]; then
    SUDO_OPTS="${SUDO_OPTS} -g $MINECRAFT_GID"
  fi
  
  # if no sudo-opts are present, then let's run this without sudo
  if [ -z "$SUDO_OPTS" ]; then
    $DAEMON $*
  else
    sudo $SUDO_OPTS $DAEMON $*
  fi
  
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	
	start-stop-daemon --start --pidfile "$PIDFILE" --exec "$DAEMON" --chuid $MINECRAFT_UID -- start || return 2

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	#RETVAL="$?"
	#[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	#[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	#rm -f $PIDFILE
	#return "$RETVAL"
  
  #start-stop-daemon --stop --pidfile "$PIDFILE" --retry=TERM/KILL --oknodo || return 2
  exec_mcwrapper stop
}

case "$1" in
  start)
  	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  	
  	do_start &> /dev/null
  	
  	case "$?" in
  		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
  		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  	esac
  	
  	;;
  stop)
  	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  	
  	do_stop &> /dev/null
  	
  	case "$?" in
  		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
  		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  	esac
  	
  	;;
  restart)
    
    exec_mcwrapper restart &> /dev/null
    
    ;;
  status)
	  exec_mcwrapper status &> /dev/null
	  
    case "$?" in
      0) log_daemon_msg "Minecraft is running." ;;
      *) log_daemon_msg "Minecraft is not running." ;;
    esac
    
	  ;;

  backup)
	  exec_mcwrapper backup
	  ;;

  *)
	  echo "Usage: $SCRIPTNAME {start|stop|status|restart|backup}" >&2
	  exit 3
	;;
esac

: